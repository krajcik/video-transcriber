// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"assemblyai-transcriber/internal/interfaces"
	"context"
	"sync"
)

// Ensure, that TranscriberMock does implement interfaces.Transcriber.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Transcriber = &TranscriberMock{}

// TranscriberMock is a mock implementation of interfaces.Transcriber.
//
//	func TestSomethingThatUsesTranscriber(t *testing.T) {
//
//		// make and configure a mocked interfaces.Transcriber
//		mockedTranscriber := &TranscriberMock{
//			TranscribeVideoFunc: func(ctx context.Context, videoPath string) (string, error) {
//				panic("mock out the TranscribeVideo method")
//			},
//		}
//
//		// use mockedTranscriber in code that requires interfaces.Transcriber
//		// and then make assertions.
//
//	}
type TranscriberMock struct {
	// TranscribeVideoFunc mocks the TranscribeVideo method.
	TranscribeVideoFunc func(ctx context.Context, videoPath string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// TranscribeVideo holds details about calls to the TranscribeVideo method.
		TranscribeVideo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// VideoPath is the videoPath argument value.
			VideoPath string
		}
	}
	lockTranscribeVideo sync.RWMutex
}

// TranscribeVideo calls TranscribeVideoFunc.
func (mock *TranscriberMock) TranscribeVideo(ctx context.Context, videoPath string) (string, error) {
	if mock.TranscribeVideoFunc == nil {
		panic("TranscriberMock.TranscribeVideoFunc: method is nil but Transcriber.TranscribeVideo was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		VideoPath string
	}{
		Ctx:       ctx,
		VideoPath: videoPath,
	}
	mock.lockTranscribeVideo.Lock()
	mock.calls.TranscribeVideo = append(mock.calls.TranscribeVideo, callInfo)
	mock.lockTranscribeVideo.Unlock()
	return mock.TranscribeVideoFunc(ctx, videoPath)
}

// TranscribeVideoCalls gets all the calls that were made to TranscribeVideo.
// Check the length with:
//
//	len(mockedTranscriber.TranscribeVideoCalls())
func (mock *TranscriberMock) TranscribeVideoCalls() []struct {
	Ctx       context.Context
	VideoPath string
} {
	var calls []struct {
		Ctx       context.Context
		VideoPath string
	}
	mock.lockTranscribeVideo.RLock()
	calls = mock.calls.TranscribeVideo
	mock.lockTranscribeVideo.RUnlock()
	return calls
}
