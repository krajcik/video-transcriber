// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"assemblyai-transcriber/internal/interfaces"
	"sync"
)

// Ensure, that DatabaseMock does implement interfaces.Database.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Database = &DatabaseMock{}

// DatabaseMock is a mock implementation of interfaces.Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked interfaces.Database
//		mockedDatabase := &DatabaseMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			SaveTranscriptionFunc: func(fileName string, text string) (int64, error) {
//				panic("mock out the SaveTranscription method")
//			},
//			SetupFunc: func() error {
//				panic("mock out the Setup method")
//			},
//		}
//
//		// use mockedDatabase in code that requires interfaces.Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// SaveTranscriptionFunc mocks the SaveTranscription method.
	SaveTranscriptionFunc func(fileName string, text string) (int64, error)

	// SetupFunc mocks the Setup method.
	SetupFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// SaveTranscription holds details about calls to the SaveTranscription method.
		SaveTranscription []struct {
			// FileName is the fileName argument value.
			FileName string
			// Text is the text argument value.
			Text string
		}
		// Setup holds details about calls to the Setup method.
		Setup []struct {
		}
	}
	lockClose             sync.RWMutex
	lockSaveTranscription sync.RWMutex
	lockSetup             sync.RWMutex
}

// Close calls CloseFunc.
func (mock *DatabaseMock) Close() error {
	if mock.CloseFunc == nil {
		panic("DatabaseMock.CloseFunc: method is nil but Database.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedDatabase.CloseCalls())
func (mock *DatabaseMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// SaveTranscription calls SaveTranscriptionFunc.
func (mock *DatabaseMock) SaveTranscription(fileName string, text string) (int64, error) {
	if mock.SaveTranscriptionFunc == nil {
		panic("DatabaseMock.SaveTranscriptionFunc: method is nil but Database.SaveTranscription was just called")
	}
	callInfo := struct {
		FileName string
		Text     string
	}{
		FileName: fileName,
		Text:     text,
	}
	mock.lockSaveTranscription.Lock()
	mock.calls.SaveTranscription = append(mock.calls.SaveTranscription, callInfo)
	mock.lockSaveTranscription.Unlock()
	return mock.SaveTranscriptionFunc(fileName, text)
}

// SaveTranscriptionCalls gets all the calls that were made to SaveTranscription.
// Check the length with:
//
//	len(mockedDatabase.SaveTranscriptionCalls())
func (mock *DatabaseMock) SaveTranscriptionCalls() []struct {
	FileName string
	Text     string
} {
	var calls []struct {
		FileName string
		Text     string
	}
	mock.lockSaveTranscription.RLock()
	calls = mock.calls.SaveTranscription
	mock.lockSaveTranscription.RUnlock()
	return calls
}

// Setup calls SetupFunc.
func (mock *DatabaseMock) Setup() error {
	if mock.SetupFunc == nil {
		panic("DatabaseMock.SetupFunc: method is nil but Database.Setup was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSetup.Lock()
	mock.calls.Setup = append(mock.calls.Setup, callInfo)
	mock.lockSetup.Unlock()
	return mock.SetupFunc()
}

// SetupCalls gets all the calls that were made to Setup.
// Check the length with:
//
//	len(mockedDatabase.SetupCalls())
func (mock *DatabaseMock) SetupCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetup.RLock()
	calls = mock.calls.Setup
	mock.lockSetup.RUnlock()
	return calls
}
